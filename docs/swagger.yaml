definitions:
  dto.LoginInput:
    properties:
      email:
        description: 邮箱
        example: abc123@qq.com
        type: string
      password:
        description: 密码
        example: "123456"
        type: string
    required:
    - email
    - password
    type: object
  dto.Profile:
    properties:
      avatar:
        description: 头像
        type: string
      email:
        description: 邮箱
        type: string
      id:
        description: id
        type: integer
      name:
        description: 昵称
        type: string
      phone:
        type: string
    type: object
  dto.RegisterInput:
    properties:
      email:
        description: 邮箱
        example: abc123@qq.com
        type: string
      name:
        description: 昵称
        example: 小明
        type: string
      password:
        description: 密码
        example: "123456"
        type: string
      phone:
        description: 手机号
        example: "19999999999"
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.TagInput:
    properties:
      name:
        description: 标签名
        example: mysql
        type: string
    required:
    - name
    type: object
  dto.TagListOutput:
    properties:
      list:
        items:
          $ref: '#/definitions/dto.TagOutput'
        type: array
      total:
        type: integer
    type: object
  dto.TagOutput:
    properties:
      id:
        description: id
        type: integer
      name:
        description: 标签名
        type: string
    type: object
  dto.TagUpdate:
    properties:
      id:
        description: id
        example: 1
        type: integer
      name:
        description: 标签名
        example: mysql
        type: string
    required:
    - id
    - name
    type: object
info:
  contact: {}
  license: {}
paths:
  /api/v1/login:
    post:
      description: 用户登录
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":"token","msg":"ok"}'
          schema:
            type: json
      summary: 登录
      tags:
      - 用户接口
  /api/v1/register:
    post:
      description: 用户注册
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":null,"msg":"ok"}'
          schema:
            type: json
      summary: 注册
      tags:
      - 用户接口
  /api/v1/tags:
    get:
      description: 标签列表
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/dto.TagListOutput'
      summary: 标签列表
      tags:
      - 标签
    post:
      description: 创建标签
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.TagInput'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":"","msg":"ok"}'
          schema:
            type: json
      security:
      - ApiKeyAuth: []
      summary: 创建标签
      tags:
      - 标签
    put:
      description: 修改标签
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.TagUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":"","msg":"ok"}'
          schema:
            type: json
      security:
      - ApiKeyAuth: []
      summary: 修改标签
      tags:
      - 标签
  /api/v1/tags/{id}:
    delete:
      description: 删除标签
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: 标签ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":"","msg":"ok"}'
          schema:
            type: json
      summary: 删除标签
      tags:
      - 标签
  /api/v1/user:
    get:
      description: 获取个人信息
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/dto.Profile'
      security:
      - ApiKeyAuth: []
      summary: 个人信息
      tags:
      - 用户接口
  /ping:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"pong"}'
          schema:
            type: string
      summary: ping
swagger: "2.0"
